# Calculate symptom scales
df <- df %>%
mutate(
systemic_therapy_side_effects = calculate_scale(select(., EORTCQLQBR23_Q31:EORTCQLQBR23_Q34, EORTCQLQBR23_Q36:EORTCQLQBR23_Q38)),
breast_symptoms = calculate_scale(select(., EORTCQLQBR23_Q50:EORTCQLQBR23_Q53)),
arm_symptoms = calculate_scale(select(., EORTCQLQBR23_Q47:EORTCQLQBR23_Q49)),
upset_by_hair_loss = EORTCQLQBR23_Q35
) %>%
mutate(across(c(systemic_therapy_side_effects, breast_symptoms, arm_symptoms, upset_by_hair_loss),
~ ((. - 1) / 3) * 100))
return(df)
}
# Calculate scores
EORTCQLQBR23_scored_data <- calculate_eortc_qlq_br23_scores(EORTCQLQBR23)
# Variable names for the EORTC QLQ-BR23 scores
var_names <- c(
"body_image", "sexual_function", "sexual_enjoyment", "future_perspective",
"systemic_therapy_side_effects", "breast_symptoms", "arm_symptoms", "upset_by_hair_loss"
)
# Column labels for the EORTC QLQ-BR23 scores
col_labels <- c(
body_image = "Body Image",
sexual_function = "Sexual Function",
sexual_enjoyment = "Sexual Enjoyment",
future_perspective = "Future Perspective",
systemic_therapy_side_effects = "Systemic Therapy Side Effects",
breast_symptoms = "Breast Symptoms",
arm_symptoms = "Arm Symptoms",
upset_by_hair_loss = "Upset by Hair Loss"
)
table_caption_1 <- "Table 1.3"
table_caption_2 <- "\nSummary of EORTC QLQ-BR23 Scores"
create_summary_table(EORTCQLQBR23_scored_data, var_names, col_labels, table_caption_1, table_caption_2)
breastq_data <- BREASTQ
satisfaction_cols <- c("BREASTQMAST_Q01", "BREASTQMAST_Q02", "BREASTQMAST_Q03", "BREASTQMAST_Q04")
# Function to handle missing data by imputing mean if missing data is less than 50%
impute_missing <- function(row) {
if (sum(is.na(row)) / length(row) < 0.5) {
mean_value <- mean(row, na.rm = TRUE)
row[is.na(row)] <- mean_value
}
return(row)
}
# Apply the impute_missing function to the satisfaction columns
breastq_data[satisfaction_cols] <- t(apply(breastq_data[satisfaction_cols], 1, impute_missing))
# Calculate the raw score for Satisfaction with Breasts
breastq_data <- breastq_data %>%
mutate(
satisfaction_breasts_raw = rowSums(select(., all_of(satisfaction_cols)), na.rm = TRUE)
)
# Define a function to calculate the scaled score
calculate_scaled_score <- function(raw_score, max_score) {
return((raw_score / max_score) * 100)
}
# Assuming the max score for Satisfaction with Breasts is 25 (as an example)
max_score_satisfaction_breasts <- 16
# Calculate the scaled score for Satisfaction with Breasts
breastq_data <- breastq_data %>%
mutate(
satisfaction_breasts_scaled = calculate_scaled_score(satisfaction_breasts_raw, max_score = max_score_satisfaction_breasts)
)
# Variable names for the Satisfaction with Breasts scores
var_names <- c("satisfaction_breasts_scaled")
# Column labels for the Satisfaction with Breasts scores
col_labels <- c(
satisfaction_breasts_scaled = "Satisfaction with Breasts"
)
table_caption_1 <- "Table 1.4"
table_caption_2 <- "\nSummary of Satisfaction with Breasts Scores"
create_summary_table(breastq_data, var_names, col_labels, table_caption_1, table_caption_2)
pca_data <- as.data.frame(survey_data) %>%
mutate(
Age = current_year - naissance,
Time_since_test = current_year - depistage,
Sex = case_when(
sexe == 0 ~ "Female",
sexe == 1 ~ "Male"
),
boucle = case_when(
boucle == 0 ~ "Open",
boucle == 1 ~ "Semi-closed"
),
DT = case_when(
DT == 0 ~ "Other",
DT == 1 ~ "Type I"
)
)
var_names_pca <- c("Duree", "who5", "phq9",
"epices", "girerd", "fried", "ddsglobal", "ddsemotionnel",
"ddssoignant", "ddslife", "ddsfam", "hba1c", "tir",
"hypo", "Age", "Time_since_test")
rownames(pca_data) <- pca_data[[1]]
pca_result <- PCA(pca_data %>% select(all_of(var_names_pca)),
scale.unit = TRUE, graph = FALSE, ncp = ncol(pca_data)-1)
fviz_eig(pca_result, addlabels = TRUE, ylim = c(0, 50)) +
ggtitle("Figure 2.1\nEigenvalues of Principal Components") +
theme(plot.title = element_text(size = 11, hjust = 0.5))
fviz_pca_ind(pca_result, axes = c(1, 2), col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE) +
ggtitle("Figure 2.2.1\nIndividuals Factor Map (PC1 vs PC2)") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_pca_ind(pca_result, axes = c(1, 3), col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE) +
ggtitle("Figure 2.2.2\nIndividuals Factor Map (PC1 vs PC3)") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_pca_ind(pca_result, axes = c(2, 3), col.ind = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE) +
ggtitle("Figure 2.2.3\nIndividuals Factor Map (PC2 vs PC3)") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_pca_var(pca_result, axes = c(1, 2), col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE) +
ggtitle("Figure 2.3.1\nVariables Factor Map (PC1 vs PC2)") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_pca_var(pca_result, axes = c(1, 3), col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE) +
ggtitle("Figure 2.3.2\nVariables Factor Map (PC1 vs PC3)") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_pca_var(pca_result, axes = c(2, 3), col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE) +
ggtitle("Figure 2.3.3\nVariables Factor Map (PC2 vs PC3)") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_contrib(pca_result, choice = "var", axes = 1) +
ggtitle("Figure 2.4.1\nContributing Variables to PC1") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_contrib(pca_result, choice = "var", axes = 2) +
ggtitle("Figure 2.4.2\nContributing Variables to PC2") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_contrib(pca_result, choice = "var", axes = 3) +
ggtitle("Figure 2.4.3\nContributing Variables to PC3") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_contrib(pca_result, choice = "var", axes = 4) +
ggtitle("Figure 2.4.4\nContributing Variables to PC4") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_contrib(pca_result, choice = "ind", axes = 1, top = 20) +
ggtitle("Figure 2.4.5\nContributing Individuals to PC1") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_contrib(pca_result, choice = "ind", axes = 2, top = 20) +
ggtitle("Figure 2.4.6\nContributing Individuals to PC2") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
res.hcpc <- HCPC(pca_result, graph = FALSE)
fviz_dend(res.hcpc,
cex = 0.7,                     # Label size
palette = "jco",               # Color palette see ?ggpubr::ggpar
rect = TRUE, rect_fill = TRUE, # Add rectangle around groups
rect_border = "jco",           # Rectangle color
labels_track_height = 0.8      # Augment the room for labels
) +
ggtitle("Figure 2.5.1\nCluster Dendogram") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_cluster(res.hcpc,
repel = TRUE,            # Avoid label overlapping
show.clust.cent = TRUE, # Show cluster centers
palette = "jco",         # Color palette see ?ggpubr::ggpar
ggtheme = theme_minimal(),
main = "Factor map"
) +
ggtitle("Figure 2.5.2\nFactor map") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
clusters <- res.hcpc$data.clust$clust
cluster_counts <- table(clusters)
print(cluster_counts)
# Manually extract each cluster's data
cluster_1 <- res.hcpc$desc.v[["quanti"]][["1"]]
cluster_2 <- res.hcpc$desc.v[["quanti"]][["2"]]
cluster_3 <- res.hcpc$desc.v[["quanti"]][["3"]]
# Convert each cluster's data into a data frame
df1 <- rownames_to_column(as.data.frame(cluster_1), var = "Variable")
df2 <- rownames_to_column(as.data.frame(cluster_2), var = "Variable")
df3 <- rownames_to_column(as.data.frame(cluster_3), var = "Variable")
# Add a column to identify the cluster
df1$Cluster <- 1
df2$Cluster <- 2
df3$Cluster <- 3
format_p_value <- function(p) {
if (p < 0.005) {
"<0.005"
} else {
formatC(p, format = "f", digits = 3)
}
}
# Vectorize the format_p_value function
format_p_value_vectorized <- Vectorize(format_p_value)
# Combine data frames and format p-values
final_stat <- rbind(df1, df2, df3) %>%
mutate(
p.value = paste("   ", format_p_value_vectorized(p.value))
)
# Combine all clusters into one data frame
final_stat %>% as_flextable(max_row = 999) %>%
set_caption(
caption = as_paragraph(
as_chunk("Table 2.1", props = fp_text(font.size = 11)),
as_chunk("\nDescription of each cluster by quantitative variables", props = fp_text(font.size = 11))
),
fp_p = fp_par(text.align = "center", padding = 5)
)%>%
add_footer_lines("Source: Questionaire Baseline") %>%
fix_border_issues() %>%
autofit()
pca_dataFAMD <- pca_data %>%
select(-c("sexe","naissance","depistage", "patient ID"))
rownames(pca_dataFAMD) <- pca_data$`patient ID`
res.famd <- FAMD(pca_dataFAMD, ncp = 20, sup.var = NULL, ind.sup = NULL, graph = FALSE)
fviz_eig(res.famd, addlabels = TRUE, ylim = c(0, 40)) +
ggtitle("Figure 3.1\nEigenvalues of Principal Components") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_famd_var(res.famd, repel = TRUE) +
ggtitle("Figure 3.2\nPlot of variables") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_contrib(res.famd, "var", axes = 1) +
ggtitle("Figure 3.3\nContribution to the first dimension") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_contrib(res.famd, "var", axes = 2) +
ggtitle("Figure 3.4\nContribution to the second dimension") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_famd_var(res.famd, "quanti.var", axes = c(1, 2), col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE) +
ggtitle("Figure 3.5\nQuantitative variables - FAMD") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_famd_var(res.famd, "quanti.var", axes = c(1, 3), col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE) +
ggtitle("Figure 3.6\nQuantitative variables - FAMD") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_famd_var(res.famd, "quanti.var", axes = c(2, 3), col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE) +
ggtitle("Figure 3.7\nQuantitative variables - FAMD") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_famd_var(res.famd, "quanti.var", axes = c(1, 4), col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), repel = TRUE) +
ggtitle("Figure 3.8\nQuantitative variables - FAMD") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_famd_var(res.famd, "quali.var", col.var = "cos2", axes = c(1, 2),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07")) +
ggtitle("Figure 3.9\nQuantitative variables - FAMD") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_famd_var(res.famd, "quali.var", col.var = "cos2", axes = c(1, 3),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07")) +
ggtitle("Figure 3.10\nQuantitative variables - FAMD") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_famd_var(res.famd, "quali.var", col.var = "cos2", axes = c(2, 3),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07")) +
ggtitle("Figure 3.11\nQuantitative variables - FAMD") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
fviz_mfa_ind(res.famd,
habillage = "boucle", # color by groups
addEllipses = TRUE,
repel = TRUE # Avoid text overlapping
) +
ggtitle("Figure 3.11\nQuantitative variables - FAMD") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
library(nnet)
library(GGally)
pca_data$boucle_bin <- ifelse(pca_data$boucle == "Open", 0, 1)
model <- glm(boucle_bin ~ hba1c + tir + hypo, family = binomial, data = pca_data)
ggcoef_multinom(model)+
ggtitle("Figure 3.12\nLog odds ratios (log(OR)) for different types of insulin pumps") +
theme(plot.title = element_text(size = 12, hjust = 0.5))
# Assuming 'model' is your logistic regression model
summary_model <- summary(model)
# Extract the coefficients matrix
coefficients_matrix <- summary_model$coefficients
# Convert the matrix to a data frame
coefficients_df <- as.data.frame(coefficients_matrix)
coefficients_df$Term <- rownames(coefficients_df)
rownames(coefficients_df) <- NULL
# Reorder columns to have 'Term' first
coefficients_df <- coefficients_df[, c("Term", "Estimate", "Std. Error", "z value", "Pr(>|z|)")]%>%
mutate(
`Pr(>|z|)` = formatC( `Pr(>|z|)`, format = "f", digits = 4)
)
coefficients_df %>%
as_flextable(max_row = 999) %>%
set_caption(
caption = as_paragraph(
as_chunk("Table 4.1", props = fp_text(font.size = 11)),
as_chunk("\nSummary of Logistic regression", props = fp_text(font.size = 11))
),
fp_p = fp_par(text.align = "center", padding = 5)
)%>%
fix_border_issues() %>%
autofit()
pca_data$Sex <- as.factor(pca_data$Sex)
pca_data$DT <- as.factor(pca_data$DT)
numeric_vars <- c("Age", "Duree", "who5", "phq9", "epices", "girerd", "fried",
"ddsglobal", "ddssoignant", "ddslife", "ddsfam", "hba1c", "tir", "hypo")
pca_data_2 <- pca_data
pca_data_2[numeric_vars] <- lapply(pca_data[numeric_vars], scale)
formula <- boucle_bin ~ Age + Duree + who5 + phq9 + epices + girerd + fried +
ddsglobal + hba1c + tir + hypo
model <- glm(
formula,
family = binomial,
data = pca_data_2
)
summary_model <- summary(model)
# Extract the coefficients matrix
coefficients_matrix <- summary_model$coefficients
# Convert the matrix to a data frame
coefficients_df <- as.data.frame(coefficients_matrix)
coefficients_df$Term <- rownames(coefficients_df)
rownames(coefficients_df) <- NULL
# Reorder columns to have 'Term' first
coefficients_df <- coefficients_df[, c("Term", "Estimate", "Std. Error", "z value", "Pr(>|z|)")]%>%
mutate(
`Pr(>|z|)` = formatC( `Pr(>|z|)`, format = "f", digits = 4)
)
set_flextable_defaults(digits = 4)
coefficients_df %>%
as_flextable(max_row = 999) %>%
set_caption(
caption = as_paragraph(
as_chunk("Table 4.1", props = fp_text(font.size = 11)),
as_chunk("\nSummary of Logistic regression", props = fp_text(font.size = 11))
),
fp_p = fp_par(text.align = "center", padding = 5)
)%>%
fix_border_issues() %>%
autofit()
ggcoef_multinom(model)+
ggtitle("Figure 3.13\nLog odds ratios (log(OR)) for different types of insulin pumps") +
theme(plot.title = element_text(size = 12, hjust = 0.5))
pca_data$Sex <- as.factor(pca_data$Sex)
pca_data$DT <- as.factor(pca_data$DT)
numeric_vars <- c("Age", "Duree", "who5", "phq9", "epices", "girerd", "fried",
"ddsglobal", "ddssoignant", "ddslife", "ddsfam", "hba1c", "tir", "hypo")
pca_data_2 <- pca_data
pca_data_2[numeric_vars] <- lapply(pca_data[numeric_vars], scale)
formula <- boucle_bin ~ Age + Duree + who5 + phq9 + epices + girerd + fried +
ddsglobal + hba1c + tir + hypo
model_2 <- glm(
formula,
family = binomial,
data = pca_data_2
)
summary_model <- summary(model_2)
# Extract the coefficients matrix
coefficients_matrix <- summary_model$coefficients
# Convert the matrix to a data frame
coefficients_df <- as.data.frame(coefficients_matrix)
coefficients_df$Term <- rownames(coefficients_df)
rownames(coefficients_df) <- NULL
# Reorder columns to have 'Term' first
coefficients_df <- coefficients_df[, c("Term", "Estimate", "Std. Error", "z value", "Pr(>|z|)")]%>%
mutate(
`Pr(>|z|)` = formatC( `Pr(>|z|)`, format = "f", digits = 4)
)
set_flextable_defaults(digits = 4)
coefficients_df %>%
as_flextable(max_row = 999) %>%
set_caption(
caption = as_paragraph(
as_chunk("Table 4.1", props = fp_text(font.size = 11)),
as_chunk("\nSummary of Logistic regression", props = fp_text(font.size = 11))
),
fp_p = fp_par(text.align = "center", padding = 5)
)%>%
fix_border_issues() %>%
autofit()
ggcoef_multinom(model)+
ggtitle("Figure 3.13\nLog odds ratios (log(OR)) for different types of insulin pumps") +
theme(plot.title = element_text(size = 12, hjust = 0.5))
numeric_vars <- c("Age", "Duree", "who5", "phq9", "epices", "girerd", "fried",
"ddsglobal", "ddssoignant", "ddslife", "ddsfam", "hba1c", "tir", "hypo")
pca_data$Sex <- as.factor(pca_data$Sex)
pca_data$DT <- as.factor(pca_data$DT)
numeric_vars <- c("Age", "Duree", "who5", "phq9", "epices", "girerd", "fried",
"ddsglobal", "ddssoignant", "ddslife", "ddsfam", "hba1c", "tir", "hypo")
pca_data_2 <- pca_data
pca_data_2[numeric_vars] <- lapply(pca_data[numeric_vars], scale)
formula <- boucle_bin ~ Age + Duree + who5 + I(who5^2) + I(who5^3) + phq9 + epices + girerd + fried +
ddsglobal + hba1c + tir + hypo
model_2 <- glm(
formula,
family = binomial,
data = pca_data_2
)
summary_model <- summary(model_2)
# Extract the coefficients matrix
coefficients_matrix <- summary_model$coefficients
# Convert the matrix to a data frame
coefficients_df <- as.data.frame(coefficients_matrix)
coefficients_df$Term <- rownames(coefficients_df)
rownames(coefficients_df) <- NULL
# Reorder columns to have 'Term' first
coefficients_df <- coefficients_df[, c("Term", "Estimate", "Std. Error", "z value", "Pr(>|z|)")]%>%
mutate(
`Pr(>|z|)` = formatC( `Pr(>|z|)`, format = "f", digits = 4)
)
set_flextable_defaults(digits = 4)
coefficients_df %>%
as_flextable(max_row = 999) %>%
set_caption(
caption = as_paragraph(
as_chunk("Table 4.1", props = fp_text(font.size = 11)),
as_chunk("\nSummary of Logistic regression", props = fp_text(font.size = 11))
),
fp_p = fp_par(text.align = "center", padding = 5)
)%>%
fix_border_issues() %>%
autofit()
ggcoef_multinom(model)+
ggtitle("Figure 3.13\nLog odds ratios (log(OR)) for different types of insulin pumps") +
theme(plot.title = element_text(size = 12, hjust = 0.5))
pca_data$Sex <- as.factor(pca_data$Sex)
pca_data$DT <- as.factor(pca_data$DT)
numeric_vars <- c("Age", "Duree", "who5", "phq9", "epices", "girerd", "fried",
"ddsglobal", "ddssoignant", "ddslife", "ddsfam", "hba1c", "tir", "hypo")
pca_data_2 <- pca_data
pca_data_2[numeric_vars] <- lapply(pca_data[numeric_vars], scale)
formula <- boucle_bin ~ Age + Duree + who5 + I(who5^2) + I(who5^3) + phq9 + epices + girerd + fried +
ddsglobal + hba1c + tir + hypo
model_2 <- glm(
formula,
family = binomial,
data = pca_data_2
)
summary_model <- summary(model_2)
# Extract the coefficients matrix
coefficients_matrix <- summary_model$coefficients
# Convert the matrix to a data frame
coefficients_df <- as.data.frame(coefficients_matrix)
coefficients_df$Term <- rownames(coefficients_df)
rownames(coefficients_df) <- NULL
# Reorder columns to have 'Term' first
coefficients_df <- coefficients_df[, c("Term", "Estimate", "Std. Error", "z value", "Pr(>|z|)")]%>%
mutate(
`Pr(>|z|)` = formatC( `Pr(>|z|)`, format = "f", digits = 4)
)
set_flextable_defaults(digits = 4)
coefficients_df %>%
as_flextable(max_row = 999) %>%
set_caption(
caption = as_paragraph(
as_chunk("Table 4.1", props = fp_text(font.size = 11)),
as_chunk("\nSummary of Logistic regression", props = fp_text(font.size = 11))
),
fp_p = fp_par(text.align = "center", padding = 5)
)%>%
fix_border_issues() %>%
autofit()
ggcoef_multinom(model_2)+
ggtitle("Figure 3.13\nLog odds ratios (log(OR)) for different types of insulin pumps") +
theme(plot.title = element_text(size = 12, hjust = 0.5))
plot(model )
plot(model_2 )
# Plot ROC curves
plot(roc_1, col = "blue", main = "ROC Curve Comparison")
# Compare AIC and BIC
aic_comparison <- data.frame(
Model = c("Model 1", "Model 2"),
AIC = c(AIC(model), AIC(model_2)),
BIC = c(BIC(model), BIC(model_2))
)
print(aic_comparison)
# Visualize comparison with ROC curves
library(pROC)
# Compare AIC and BIC
aic_comparison <- data.frame(
Model = c("Model 1", "Model 2"),
AIC = c(AIC(model), AIC(model_2)),
BIC = c(BIC(model), BIC(model_2))
)
print(aic_comparison)
# Visualize comparison with ROC curves
require(pROC)
# Predictions
pred_1 <- predict(model, type = "response")
pred_2 <- predict(model_2, type = "response")
# ROC curves
roc_1 <- roc(pca_data_2$boucle_bin, pred_1)
install.packages("pROC")
# Compare AIC and BIC
aic_comparison <- data.frame(
Model = c("Model 1", "Model 2"),
AIC = c(AIC(model), AIC(model_2)),
BIC = c(BIC(model), BIC(model_2))
)
print(aic_comparison)
# Visualize comparison with ROC curves
libarary(pROC)
# Compare AIC and BIC
aic_comparison <- data.frame(
Model = c("Model 1", "Model 2"),
AIC = c(AIC(model), AIC(model_2)),
BIC = c(BIC(model), BIC(model_2))
)
print(aic_comparison)
# Visualize comparison with ROC curves
library(pROC)
# Predictions
pred_1 <- predict(model, type = "response")
pred_2 <- predict(model_2, type = "response")
# ROC curves
roc_1 <- roc(pca_data_2$boucle_bin, pred_1)
roc_2 <- roc(pca_data_2$boucle_bin, pred_2)
# Plot ROC curves
plot(roc_1, col = "blue", main = "ROC Curve Comparison")
lines(roc_2, col = "red")
legend("bottomright", legend = c("Model 1", "Model 2"), col = c("blue", "red"), lwd = 2)
# Compare AIC and BIC
aic_comparison <- data.frame(
Model = c("Model 1", "Model 2"),
AIC = c(AIC(model), AIC(model_2)),
BIC = c(BIC(model), BIC(model_2))
)
print(aic_comparison)
# Visualize comparison with ROC curves
library(pROC)
# Predictions
pred_1 <- predict(model, type = "response")
pred_2 <- predict(model_2, type = "response")
# ROC curves
roc_1 <- roc(pca_data_2$boucle_bin, pred_1)
roc_2 <- roc(pca_data_2$boucle_bin, pred_2)
# Plot ROC curves
plot(roc_1, col = "blue", main = "ROC Curve Comparison")
lines(roc_2, col = "red")
legend("bottomright", legend = c("Model 1", "Model 2"), col = c("blue", "red"), lwd = 2)
